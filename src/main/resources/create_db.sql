-- Create database structure script for forum
-- Oracle Database

-- Create Role table
CREATE TABLE Role (
                      role_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      role_name VARCHAR2(30) NOT NULL
);

-- Create Permissions table
CREATE TABLE Permissions (
                             permission_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                             permission_name VARCHAR2(50) NOT NULL
);

-- Create User table
CREATE TABLE "User" (
                        user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        username VARCHAR2(50) NOT NULL UNIQUE,
                        email VARCHAR2(100) NOT NULL UNIQUE,
                        password VARCHAR2(255) NOT NULL,
                        registration_date TIMESTAMP NOT NULL,
                        role_id INTEGER NOT NULL,
                        CONSTRAINT fk_user_role FOREIGN KEY (role_id) REFERENCES Role(role_id),
                        CONSTRAINT check_password_length CHECK (LENGTH(password) >= 8)
);

-- Create Roles_Permissions table (many-to-many relationship)
CREATE TABLE Roles_Permissions (
                                   role_id INTEGER NOT NULL,
                                   permission_id INTEGER NOT NULL,
                                   CONSTRAINT pk_roles_permissions PRIMARY KEY (role_id, permission_id),
                                   CONSTRAINT fk_rp_role FOREIGN KEY (role_id) REFERENCES Role(role_id),
                                   CONSTRAINT fk_rp_permission FOREIGN KEY (permission_id) REFERENCES Permissions(permission_id)
);

-- Create Category table
CREATE TABLE Category (
                          category_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          name VARCHAR2(100) NOT NULL,
                          description VARCHAR2(500)
);

-- Create Topic table
CREATE TABLE Topic (
                       topic_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       title VARCHAR2(200) NOT NULL,
                       content CLOB NOT NULL,
                       created_at TIMESTAMP NOT NULL,
                       updated_at TIMESTAMP,
                       user_id INTEGER NOT NULL,
                       category_id INTEGER NOT NULL,
                       deleted_at TIMESTAMP,
                       CONSTRAINT fk_topic_user FOREIGN KEY (user_id) REFERENCES "User"(user_id),
                       CONSTRAINT fk_topic_category FOREIGN KEY (category_id) REFERENCES Category(category_id)
);

-- Create Tag table
CREATE TABLE Tag (
                     tag_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                     name VARCHAR2(50) NOT NULL UNIQUE
);

-- Create Topic_Tag table (many-to-many relationship)
CREATE TABLE Topic_Tag (
                           topic_id INTEGER NOT NULL,
                           tag_id INTEGER NOT NULL,
                           CONSTRAINT pk_topic_tag PRIMARY KEY (topic_id, tag_id),
                           CONSTRAINT fk_tt_topic FOREIGN KEY (topic_id) REFERENCES Topic(topic_id),
                           CONSTRAINT fk_tt_tag FOREIGN KEY (tag_id) REFERENCES Tag(tag_id)
);

-- Create Comment table
CREATE TABLE Comment_ (
                          comment_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          content CLOB NOT NULL,
                          created_at TIMESTAMP NOT NULL,
                          deleted_at TIMESTAMP,
                          user_id INTEGER NOT NULL,
                          topic_id INTEGER NOT NULL,
                          CONSTRAINT fk_comment_user FOREIGN KEY (user_id) REFERENCES "User"(user_id),
                          CONSTRAINT fk_comment_topic FOREIGN KEY (topic_id) REFERENCES Topic(topic_id)
);

-- Create Attachment table
CREATE TABLE Attachment (
                            attachment_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            file_path VARCHAR2(255) NOT NULL,
                            uploaded_at TIMESTAMP NOT NULL,
                            comment_id INTEGER,
                            topic_id INTEGER,
                            CONSTRAINT fk_attach_comment FOREIGN KEY (comment_id) REFERENCES Comment_(comment_id),
                            CONSTRAINT fk_attach_topic FOREIGN KEY (topic_id) REFERENCES Topic(topic_id),
    -- Check that attachment belongs to either topic OR comment
                            CONSTRAINT check_attachment_parent CHECK (
                                (comment_id IS NOT NULL AND topic_id IS NULL) OR
                                (comment_id IS NULL AND topic_id IS NOT NULL)
                                )
);

-- Create Message table
CREATE TABLE Message (
                         message_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         content CLOB NOT NULL,
                         sent_at TIMESTAMP NOT NULL,
                         sender_id INTEGER NOT NULL,
                         recipient_id INTEGER NOT NULL,
                         CONSTRAINT fk_message_sender FOREIGN KEY (sender_id) REFERENCES "User"(user_id),
                         CONSTRAINT fk_message_recipient FOREIGN KEY (recipient_id) REFERENCES "User"(user_id)
);

-- Create Notification table
CREATE TABLE Notification (
                              notification_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                              content VARCHAR2(255) NOT NULL,
                              created_at TIMESTAMP NOT NULL,
                              read_at TIMESTAMP,
                              user_id INTEGER NOT NULL,
                              CONSTRAINT fk_notification_user FOREIGN KEY (user_id) REFERENCES "User"(user_id)
);

-- Create Moderation_Log table
CREATE TABLE Moderation_Log (
                                log_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                action VARCHAR2(100) NOT NULL,
                                created_at TIMESTAMP NOT NULL,
                                user_id INTEGER NOT NULL,
                                target_id INTEGER NOT NULL,
                                target_type VARCHAR2(50) NOT NULL,
                                CONSTRAINT fk_modlog_user FOREIGN KEY (user_id) REFERENCES "User"(user_id)
);

-- Create Topic_Rating table
CREATE TABLE Topic_Rating (
                              rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                              score INTEGER NOT NULL,
                              user_id INTEGER NOT NULL,
                              topic_id INTEGER NOT NULL,
                              CONSTRAINT fk_rating_user FOREIGN KEY (user_id) REFERENCES "User"(user_id),
                              CONSTRAINT fk_rating_topic FOREIGN KEY (topic_id) REFERENCES Topic(topic_id),
                              CONSTRAINT check_rating_range CHECK (score >= 1 AND score <= 5),
    -- Unique constraint: one user can rate a topic only once
                              CONSTRAINT unique_user_topic_rating UNIQUE (user_id, topic_id)
);

-- Create performance indexes
CREATE INDEX idx_topic_user ON Topic(user_id);
CREATE INDEX idx_topic_category ON Topic(category_id);
CREATE INDEX idx_comment_topic ON Comment_(topic_id);
CREATE INDEX idx_comment_user ON Comment_(user_id);
CREATE INDEX idx_notification_user ON Notification(user_id);

-- Insert main roles
INSERT INTO Role (role_name) VALUES ('Administrator');
INSERT INTO Role (role_name) VALUES ('Moderator');
INSERT INTO Role (role_name) VALUES ('User');

COMMIT;