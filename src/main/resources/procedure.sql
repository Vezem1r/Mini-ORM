-- Check and create BadWords table
DECLARE
    table_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO table_count
    FROM user_tables
    WHERE table_name = 'BADWORDS';

    IF table_count = 0 THEN
        EXECUTE IMMEDIATE '
        CREATE TABLE BadWords (
                                  badword_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                  word VARCHAR2(50) NOT NULL UNIQUE
        )';
    END IF;
END;
/

-- Clear and insert test bad words
DELETE FROM BadWords;
INSERT INTO BadWords (word) VALUES ('spam');
INSERT INTO BadWords (word) VALUES ('offensive');
INSERT INTO BadWords (word) VALUES ('inappropriate');
COMMIT;

-- Create or replace the custom array type
CREATE OR REPLACE TYPE VARCHAR2_ARRAY AS TABLE OF VARCHAR2(50);
/

-- Create the stored procedure
CREATE OR REPLACE PROCEDURE InsertTopicWithDetails(
    p_topic_id OUT INTEGER,
    p_category_id IN INTEGER,
    p_user_id IN INTEGER,
    p_title IN VARCHAR2,
    p_content IN CLOB,
    p_tags_array IN VARCHAR2_ARRAY,
    p_attachment_filename IN VARCHAR2,
    p_attachment_path IN VARCHAR2,
    p_success OUT NUMBER
) AS
    v_bad_words_count INTEGER;
    v_tag_id INTEGER;
    v_attachment_id INTEGER;
    v_current_timestamp TIMESTAMP := SYSTIMESTAMP;
    v_word VARCHAR2(255);
    v_temp_text VARCHAR2(32767);
BEGIN
    -- Set success to 0
    p_success := 0;

    -- Step 1: Create new topic in the specified category
    INSERT INTO Topic (title, content, user_id, category_id, created_at)
    VALUES (p_title, p_content, p_user_id, p_category_id, v_current_timestamp)
    RETURNING topic_id INTO p_topic_id;

    -- Step 2: Check content for inappropriate words
    v_bad_words_count := 0;

    -- Check title and content for bad words
    v_temp_text := UPPER(p_title || ' ' || DBMS_LOB.SUBSTR(p_content, 1000, 1));

    FOR bad_word IN (SELECT word FROM BadWords) LOOP
            IF v_temp_text LIKE '%' || UPPER(bad_word.word) || '%' THEN
                v_bad_words_count := v_bad_words_count + 1;
                EXIT; -- Exit on first bad word found
            END IF;
        END LOOP;

    IF v_bad_words_count > 0 THEN
        ROLLBACK;
        p_success := 0;
        RETURN;
    END IF;

    -- Step 3: Process and assign tags
    IF p_tags_array IS NOT NULL AND p_tags_array.COUNT > 0 THEN
        FOR i IN 1..p_tags_array.COUNT LOOP
                -- Check if tag already exists
                v_tag_id := NULL;
                BEGIN
                    SELECT tag_id INTO v_tag_id
                    FROM Tag
                    WHERE LOWER(name) = LOWER(p_tags_array(i))
                      AND ROWNUM = 1;
                EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        v_tag_id := NULL;
                END;

                -- If tag doesn't exist, create it
                IF v_tag_id IS NULL THEN
                    INSERT INTO Tag (name)
                    VALUES (p_tags_array(i))
                    RETURNING tag_id INTO v_tag_id;
                END IF;

                -- Assign tag to topic (avoid duplicates)
                BEGIN
                    INSERT INTO Topic_Tag (topic_id, tag_id)
                    VALUES (p_topic_id, v_tag_id);
                EXCEPTION
                    WHEN DUP_VAL_ON_INDEX THEN
                        NULL; -- Ignore if already exists
                END;
            END LOOP;
    END IF;

    -- Step 4: Process attachment
    IF p_attachment_filename IS NOT NULL AND p_attachment_filename != '' THEN
        INSERT INTO Attachment (file_path, uploaded_at, topic_id)
        VALUES (
                   p_attachment_path || '/' || p_topic_id || '_' || p_attachment_filename,
                   v_current_timestamp,
                   p_topic_id
               );
    END IF;

    -- Step 5: Create first comment
    INSERT INTO Comment_ (content, user_id, topic_id, created_at)
    VALUES (p_content, p_user_id, p_topic_id, v_current_timestamp);

    -- If everything is OK, commit and return true
    COMMIT;
    p_success := 1;

EXCEPTION
    WHEN OTHERS THEN
        -- In case of any error, rollback and return false
        ROLLBACK;
        p_success := 0;
        RAISE;
END InsertTopicWithDetails;
/